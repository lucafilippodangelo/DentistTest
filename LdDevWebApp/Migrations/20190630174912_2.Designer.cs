// <auto-generated />
using System;
using LdDevWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LdDevWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190630174912_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Notes");

                    b.Property<Guid?>("PatientId");

                    b.Property<Guid?>("PractiseId");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractiseId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new { Id = new Guid("644f17b2-6e34-4cad-bab5-8bba425270a4"), Notes = "Seeded Appointment One", PractiseId = new Guid("8912aa35-1433-48fe-ae72-de2aaa38e37e"), When = new DateTime(2019, 5, 1, 8, 30, 52, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("9022622f-7adf-44ed-9efa-d362d937b5b8"), Notes = "Seeded Appointment Two", PractiseId = new Guid("9012aa35-1433-48fe-ae72-de2aaa38e37e"), When = new DateTime(2019, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AppointmentId");

                    b.Property<string>("Information");

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentLogs");

                    b.HasData(
                        new { Id = new Guid("1d2f7b60-6236-4598-a28b-a03d03eb1b94"), AppointmentId = new Guid("644f17b2-6e34-4cad-bab5-8bba425270a4"), Information = "Seeded Log One for Appointment One", When = new DateTime(2019, 5, 1, 8, 30, 52, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("253d32ba-ba51-4f51-b151-caa02eb54f23"), AppointmentId = new Guid("644f17b2-6e34-4cad-bab5-8bba425270a4"), Information = "Seeded Log Two for Appointment One", When = new DateTime(2019, 5, 2, 14, 30, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("3b3d41f9-ed3b-45b6-89d5-a878b007b32a"), AppointmentId = new Guid("644f17b2-6e34-4cad-bab5-8bba425270a4"), Information = "Seeded Log Three for Appointment One", When = new DateTime(2019, 6, 3, 4, 30, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("4e80d553-b1fd-4aed-9020-2206e2aa23cf"), AppointmentId = new Guid("9022622f-7adf-44ed-9efa-d362d937b5b8"), Information = "Seeded Log One for Appointment Two", When = new DateTime(2019, 6, 4, 5, 30, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentStaff", b =>
                {
                    b.Property<Guid>("giudAptId");

                    b.Property<Guid>("giudPersonId");

                    b.Property<Guid>("AppointmentStaffGiudId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("appointmentId");

                    b.Property<Guid?>("staffId");

                    b.HasKey("giudAptId", "giudPersonId");

                    b.HasAlternateKey("AppointmentStaffGiudId");

                    b.HasIndex("appointmentId");

                    b.HasIndex("staffId");

                    b.ToTable("AppointmentStaff");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Mail")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<string>("Phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Practise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.ToTable("Practises");

                    b.HasData(
                        new { Id = new Guid("8912aa35-1433-48fe-ae72-de2aaa38e37e"), Name = "Practise One", Notes = "Seeded Practise Note One" },
                        new { Id = new Guid("9012aa35-1433-48fe-ae72-de2aaa38e37e"), Name = "Practise Two", Notes = "Seeded Practise Note Two" }
                    );
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.StaffRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Note");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Patient", b =>
                {
                    b.HasBaseType("LdDevWebApp.Models.Entities.Person");


                    b.ToTable("Patient");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Staff", b =>
                {
                    b.HasBaseType("LdDevWebApp.Models.Entities.Person");

                    b.Property<Guid?>("StaffRoleId");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("Staff");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Appointment", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("LdDevWebApp.Models.Entities.Practise", "Practise")
                        .WithMany("Appointments")
                        .HasForeignKey("PractiseId");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentLog", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.Appointment")
                        .WithMany("AppointmentLogs")
                        .HasForeignKey("AppointmentId");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentStaff", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.Appointment", "appointment")
                        .WithMany("StaffList")
                        .HasForeignKey("appointmentId");

                    b.HasOne("LdDevWebApp.Models.Entities.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Staff", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.StaffRole", "StaffRole")
                        .WithMany("StaffRoleOfStaff")
                        .HasForeignKey("StaffRoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
