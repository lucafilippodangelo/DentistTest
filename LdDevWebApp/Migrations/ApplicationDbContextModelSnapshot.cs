// <auto-generated />
using System;
using LdDevWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LdDevWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("giudAptId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("aptNotes");

                    b.Property<Guid?>("aptPatientgiudPersonId");

                    b.Property<DateTime>("aptScheduledDateTime");

                    b.Property<Guid>("aptScheduledDurationgiudId");

                    b.Property<Guid?>("aptTreatmentTypegiudId");

                    b.Property<Guid?>("practisegiudId");

                    b.HasKey("giudAptId");

                    b.HasIndex("aptPatientgiudPersonId");

                    b.HasIndex("aptScheduledDurationgiudId");

                    b.HasIndex("aptTreatmentTypegiudId");

                    b.HasIndex("practisegiudId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentDuration", b =>
                {
                    b.Property<Guid>("giudId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("timeDuration");

                    b.Property<string>("timeDurationDescription");

                    b.HasKey("giudId");

                    b.ToTable("AppointmentDurations");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentStaff", b =>
                {
                    b.Property<Guid>("giudAptId");

                    b.Property<Guid>("giudPersonId");

                    b.HasKey("giudAptId", "giudPersonId");

                    b.HasIndex("giudPersonId");

                    b.ToTable("AppointmentStaff");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("giudPersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("mail")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("personNote")
                        .HasMaxLength(1000);

                    b.Property<string>("phone");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("giudPersonId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Practise", b =>
                {
                    b.Property<Guid>("giudId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LocationName");

                    b.Property<string>("description");

                    b.HasKey("giudId");

                    b.ToTable("Practises");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.StaffRole", b =>
                {
                    b.Property<Guid>("giudStaffRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.HasKey("giudStaffRoleId");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.TreatmentType", b =>
                {
                    b.Property<Guid>("giudId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.HasKey("giudId");

                    b.ToTable("TreatmentTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Patient", b =>
                {
                    b.HasBaseType("LdDevWebApp.Models.Entities.Person");

                    b.Property<string>("patientNote")
                        .HasMaxLength(1000);

                    b.ToTable("Patient");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Staff", b =>
                {
                    b.HasBaseType("LdDevWebApp.Models.Entities.Person");

                    b.Property<string>("staffNote")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("staffRolegiudStaffRoleId");

                    b.HasIndex("staffRolegiudStaffRoleId");

                    b.ToTable("Staff");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Appointment", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.Patient", "aptPatient")
                        .WithMany("patientApts")
                        .HasForeignKey("aptPatientgiudPersonId");

                    b.HasOne("LdDevWebApp.Models.Entities.AppointmentDuration", "aptScheduledDuration")
                        .WithMany()
                        .HasForeignKey("aptScheduledDurationgiudId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LdDevWebApp.Models.Entities.TreatmentType", "aptTreatmentType")
                        .WithMany("AppointmentNavigation")
                        .HasForeignKey("aptTreatmentTypegiudId");

                    b.HasOne("LdDevWebApp.Models.Entities.Practise", "practise")
                        .WithMany("practiseForApts")
                        .HasForeignKey("practisegiudId");
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.AppointmentStaff", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.Appointment", "appointment")
                        .WithMany("appointmentStaff")
                        .HasForeignKey("giudAptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LdDevWebApp.Models.Entities.Staff", "staff")
                        .WithMany("appointmentStaff")
                        .HasForeignKey("giudPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LdDevWebApp.Models.Entities.Staff", b =>
                {
                    b.HasOne("LdDevWebApp.Models.Entities.StaffRole", "staffRole")
                        .WithMany()
                        .HasForeignKey("staffRolegiudStaffRoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
